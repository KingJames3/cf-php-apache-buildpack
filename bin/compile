#!/usr/bin/env python
import sys
import os
import os.path
import shutil
import json
import urllib2
import hashlib
from functools import partial

# Open stdout unbuffered
sys.stdout = os.fdopen(sys.stdout.fileno(), 'wb', 0)


def calc_sha1(filePath):
    with open(filePath, 'rb') as f:
        d = hashlib.sha1()
        for buf in iter(partial(f.read, 256), ''):
            d.update(buf)
    return d.hexdigest()


def download_url(url, toFile, sha1):
    """Download a url to a file"""
    if not os.path.exists(toFile) or sha1 != calc_sha1(toFile):
        res = urllib2.urlopen(url)
        with open(toFile, 'w') as f:
            f.write(res.read())
        print 'Downloaded [%s]' % toFile
    else:
        print 'Cached [%s]' % toFile

# User's application files
BUILD_DIR = sys.argv[1]

# Cache space for the build pack
CACHE_DIR = sys.argv[2]

# Temp space
TMP_DIR = os.environ.get('TMPDIR', '/tmp')

# Make sure cache & build directories exist
if not os.path.exists(BUILD_DIR):
    os.makedirs(BUILD_DIR)
if not os.path.exists(CACHE_DIR):
    os.makedirs(CACHE_DIR)

# Build pack location
BP_DIR = os.path.dirname(os.path.dirname(sys.argv[0]))

# Load configuration options
default_cfg_file = os.path.join(BP_DIR,
                                'default',
                                'options.json')
default_cfg = json.load(open(default_cfg_file))
user_config_file = os.path.join(BUILD_DIR, 'config', 'options.json')
if os.path.exists(user_config_file):
    print 'Custom config found, overriding default options'
    user_config = json.load(open(user_config_file))
    config = dict(default_cfg.items() + user_config.items())
else:
    config = default_cfg

# Location of Downloads
BIN_URL = config['DOWNLOAD_URL']

# Download HTTPD & Install
httpd_bin_file = 'httpd-%s-bin.tar.gz' % config['HTTPD_VERSION']
print 'Configuring HTTPD Version: %s' % config['HTTPD_VERSION']
download_url(
    os.path.join(BIN_URL, httpd_bin_file),
    os.path.join(CACHE_DIR, httpd_bin_file),
    config['HTTPD_SHA1'])
os.system('cd %s; gunzip -c %s | tar xf -' % (CACHE_DIR, httpd_bin_file))
shutil.move(
    os.path.join(CACHE_DIR, httpd_bin_file[:-7]),
    os.path.join(BUILD_DIR, 'httpd'))

# Install HTTPD Configuration
default_cfg_dir = os.path.join(BP_DIR, 'default')
httpd_cfg_dir = os.path.join(BUILD_DIR, 'httpd', 'conf')
user_cfg_dir = os.path.join(BUILD_DIR, 'config', 'httpd')
cfg_files = (
    'httpd.conf',
    os.path.join('extra', 'httpd-default.conf'),
    os.path.join('extra', 'httpd-directories.conf'),
    os.path.join('extra', 'httpd-logging.conf'),
    os.path.join('extra', 'httpd-mime.conf'),
    os.path.join('extra', 'httpd-modules.conf'),
    os.path.join('extra', 'httpd-mpm.conf'),
    os.path.join('extra', 'httpd-php.conf')
)
for cfg_file in cfg_files:
    if os.path.exists(os.path.join(user_cfg_dir, cfg_file)) \
            and cfg_file != "httpd.conf":
        print 'Found custom %s file, installing.' % cfg_file
        shutil.copy(
            os.path.join(user_cfg_dir, cfg_file),
            os.path.join(httpd_cfg_dir, cfg_file))
    else:
        shutil.copy(
            os.path.join(default_cfg_dir, cfg_file),
            os.path.join(httpd_cfg_dir, cfg_file))

# Download PHP & Install
php_bin_file = 'php-%s-bin.tar.gz' % config['PHP_VERSION']
print 'Configuring PHP Version: %s' % config['PHP_VERSION']
download_url(
    os.path.join(BIN_URL, php_bin_file),
    os.path.join(CACHE_DIR, php_bin_file),
    config['PHP_SHA1'])
os.system('cd %s; gunzip -c %s | tar xf -' % (CACHE_DIR, php_bin_file))
shutil.move(
    os.path.join(CACHE_DIR, php_bin_file[:-7]),
    os.path.join(BUILD_DIR, 'php'))

# Setup php.ini
php_ini_file = os.path.join(BUILD_DIR, 'config', 'php.ini')
if os.path.exists(php_ini_file):
    print 'Found custom php.ini file, installing.'
    shutil.copy(php_ini_file,
                os.path.join(BUILD_DIR, 'php', 'etc', 'php.ini'))
else:
    shutil.copy(os.path.join(default_cfg_dir, 'php.ini'),
                os.path.join(BUILD_DIR, 'php', 'etc', 'php.ini'))

# Install PECL & PEAR Extensions
with open(os.path.join(BUILD_DIR, 'php', 'etc', 'pear.conf'), 'r+') as f:
    pearConf = f.read()
    pearConf = pearConf.replace('/home/cloud/builds/php-5.4.16-bin/', os.path.join(BUILD_DIR, 'php'))
    print "Updated pear.conf [%s]" % pearConf
    f.seek(0)
    f.write(pearConf)
os.system('cd %s; ./bin/pecl -R "%s" install mailparse' % (os.path.join(BUILD_DIR, "php"), os.path.join(BUILD_DIR, "php")))

# Create a startup script
with open(os.path.join(BUILD_DIR, 'start.sh'), 'wt') as f:
    f.write('#!/usr/bin/env bash\n')
    f.write('export HTTPD_SERVER_ADMIN="%s"\n' % config['ADMIN_EMAIL'])
    f.write('%s -f %s -k start\n' % (
        os.path.join("$HOME", 'httpd', 'bin', 'apachectl'),
        os.path.join("$HOME", 'httpd', 'conf', 'httpd.conf')))
    f.write('while [ 1 -eq 1 ]; do\n')
    f.write('    sleep 100000\n')
    f.write('done\n')
os.chmod(os.path.join(BUILD_DIR, 'start.sh'), 0755)
