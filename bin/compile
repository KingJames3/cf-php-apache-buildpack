#!/usr/bin/env python
import sys
import os
import os.path
import shutil
import json
import urllib2
from subprocess import Popen
from subprocess import PIPE


def sha1_matches(shaFile, checkFile):
    cwd = os.getcwd()
    os.chdir(os.path.dirname(checkFile))
    proc = Popen(["shasum", "-c", shaFile, "-s"], stdout=PIPE)
    output, unused_err = proc.communicate()
    retcode = proc.poll()
    if output:
        print "shasum said [%s]" % output.strip()
    os.chdir(cwd)
    return retcode == 0


def download_url(url, toFile, sha1):
    """Download a url to a file"""
    if not os.path.exists(toFile) or not sha1_matches(sha1, toFile):
        print 'Downloading [%s]' % url
        res = urllib2.urlopen(url)
        with open(toFile, 'w') as f:
            f.write(res.read())
        print 'Downloaded [%s]' % toFile
    else:
        print 'Cached [%s]' % toFile


def extract_files(inDir, zipFile):
    cwd = os.getcwd()
    os.chdir(inDir)
    if os.path.exists(zipFile):
        proc = Popen("gunzip -c %s | tar xf -" % zipFile,
                     stdout=PIPE, shell=True)
        output, unused_err = proc.communicate()
        retcode = proc.poll()
        if retcode:
            print "Extracting [%s] failed with return code [%d]" \
                % (zipFile, retcode)
        if output:
            print "Output from extraction [%s]" % output
    else:
        print "Zip file [%s] does not exist in [%s]" % (zipFile, inDir)
    os.chdir(cwd)


def install_mod(phpDir, modType, modStr):
    cwd = os.getcwd()
    os.chdir(phpDir)
    if modType == "pear" or modType == "pecl":
        proc = Popen(['./bin/%s' % modType, "install", modStr], stdout=PIPE)
        output, unused_err = proc.communicate()
        retcode = proc.poll()
        if retcode:
            print "Install [%s, %s] return code [%d]" \
                % (modType, modStr, retcode)
        if output:
            print "Output from install [%s]" % output
    else:
        print "Invalid modType [%s]" % modType
    os.chdir(cwd)

if __name__ == '__main__':
    # Open stdout unbuffered
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'wb', 0)

    # User's application files
    BUILD_DIR = sys.argv[1]

    # Cache space for the build pack
    CACHE_DIR = sys.argv[2]

    # Temp space
    TMP_DIR = os.environ.get('TMPDIR', '/tmp')

    # Make sure cache & build directories exist
    if not os.path.exists(BUILD_DIR):
        os.makedirs(BUILD_DIR)
    if not os.path.exists(CACHE_DIR):
        os.makedirs(CACHE_DIR)

    # Build pack location
    BP_DIR = os.path.dirname(os.path.dirname(sys.argv[0]))

    # Load configuration options
    default_cfg_file = os.path.join(BP_DIR,
                                    'default',
                                    'options.json')
    default_cfg = json.load(open(default_cfg_file))
    user_config_file = os.path.join(BUILD_DIR, 'config', 'options.json')
    if os.path.exists(user_config_file):
        print 'Custom config found, overriding default options'
        user_config = json.load(open(user_config_file))
        config = dict(default_cfg.items() + user_config.items())
    else:
        config = default_cfg

    # Location of Downloads
    BIN_URL = config['DOWNLOAD_URL']

    # Location of SHA1 files
    SHA_DIR = os.path.join(BP_DIR, 'default', 'shasums')

    # Default Configuration Directory
    DEFAULT_CFG_DIR = os.path.join(BP_DIR, 'default')

    # Download HTTPD & Install
    httpd_major_version = '.'.join(config['HTTPD_VERSION'].split('.')[:-1])
    httpd_bin_file = 'httpd-%s-bin.tar.gz' % config['HTTPD_VERSION']
    print 'Configuring HTTPD Version: %s' % config['HTTPD_VERSION']
    download_url(
        os.path.join(BIN_URL, 'httpd', httpd_major_version, httpd_bin_file),
        os.path.join(CACHE_DIR, httpd_bin_file),
        os.path.join(SHA_DIR, "httpd", httpd_major_version, "%s.sha1" % httpd_bin_file))
    extract_files(CACHE_DIR, httpd_bin_file)
    shutil.move(
        os.path.join(CACHE_DIR, httpd_bin_file[:-7]),
        os.path.join(BUILD_DIR, 'httpd'))

    # Install HTTPD Configuration
    default_httpd_cfg_dir = os.path.join(DEFAULT_CFG_DIR, 'httpd',
                                         httpd_major_version)
    httpd_cfg_dir = os.path.join(BUILD_DIR, 'httpd', 'conf')
    user_cfg_dir = os.path.join(BUILD_DIR, 'config', 'httpd')
    cfg_files = (
        'httpd.conf',
        os.path.join('extra', 'httpd-default.conf'),
        os.path.join('extra', 'httpd-directories.conf'),
        os.path.join('extra', 'httpd-logging.conf'),
        os.path.join('extra', 'httpd-mime.conf'),
        os.path.join('extra', 'httpd-modules.conf'),
        os.path.join('extra', 'httpd-mpm.conf'),
        os.path.join('extra', 'httpd-php.conf')
    )
    for cfg_file in cfg_files:
        if os.path.exists(os.path.join(user_cfg_dir, cfg_file)) \
                and cfg_file != "httpd.conf":
            print 'Found custom %s file, installing.' % cfg_file
            shutil.copy(
                os.path.join(user_cfg_dir, cfg_file),
                os.path.join(httpd_cfg_dir, cfg_file))
        else:
            shutil.copy(
                os.path.join(default_httpd_cfg_dir, cfg_file),
                os.path.join(httpd_cfg_dir, cfg_file))

    # Download PHP & Install
    php_major_version = '.'.join(config['PHP_VERSION'].split('.')[:-1])
    php_bin_file = 'php-%s-bin.tar.gz' % config['PHP_VERSION']
    print 'Configuring PHP Version: %s' % config['PHP_VERSION']
    download_url(
        os.path.join(BIN_URL, 'php', php_major_version, php_bin_file),
        os.path.join(CACHE_DIR, php_bin_file),
        os.path.join(SHA_DIR, 'php', php_major_version, "%s.sha1" % php_bin_file))
    extract_files(CACHE_DIR, php_bin_file)
    php_install_dir = os.path.join(BUILD_DIR, 'php')
    shutil.move(
        os.path.join(CACHE_DIR, php_bin_file[:-7]),
        php_install_dir)

    # Setup php.ini
    default_php_cfg_dir = os.path.join(DEFAULT_CFG_DIR, 'php',
                                       php_major_version)
    php_ini_file = os.path.join(BUILD_DIR, 'config', 'php.ini')
    php_ini_install_file = os.path.join(BUILD_DIR, 'php', 'etc', 'php.ini')
    if os.path.exists(php_ini_file):
        print 'Found custom php.ini file, installing.'
        shutil.copy(php_ini_file,
                    php_ini_install_file)
    else:
        shutil.copy(os.path.join(default_php_cfg_dir, 'php.ini'),
                    php_ini_install_file)

    # Setup php-fpm.conf
    php_fpm_cnf_file = os.path.join(BUILD_DIR, 'config', 'php-fpm.conf')
    php_fpm_cnf_install_file = os.path.join(BUILD_DIR, 
                                            'php', 'etc', 'php-fpm.conf')
    if os.path.exists(php_fpm_cnf_file):
        print 'Found custom php-fpm.conf file, installing.'
        shutil.copy(php_fpm_cnf_file,
                    php_fpm_cnf_install_file)
    else:
        shutil.copy(os.path.join(default_php_cfg_dir, 'php-fpm.conf'),
                    php_fpm_cnf_install_file)

    # Install PEAR Modules
    pear_mods_file = os.path.join(BUILD_DIR, 'config', 'pear-mods.txt')
    if os.path.exists(pear_mods_file):
        with open(pear_mods_file, 'rt') as pear_mods:
            for mod in pear_mods:
                mod = mod.strip()
                print "Installing PEAR mod [%s]" % mod
                install_mod(php_install_dir, "pear", mod)

    # Create a startup script
    with open(os.path.join(BUILD_DIR, 'start.sh'), 'wt') as f:
        f.write('#!/usr/bin/env bash\n')
        f.write('%s -p "%s" -y "%s" -c "%s"' % 
            os.path.join("$HOME", "php"),
            os.path.join("$HOME", "php", "etc", "php-fpm.conf"),
            os.path.join("$HOME", "php", "etc", "php.ini"))
        f.write('export HTTPD_SERVER_ADMIN="%s"\n' % config['ADMIN_EMAIL'])
        f.write('%s -f %s -k start\n' % (
            os.path.join("$HOME", 'httpd', 'bin', 'apachectl'),
            os.path.join("$HOME", 'httpd', 'conf', 'httpd.conf')))
        f.write('while [ 1 -eq 1 ]; do\n')
        f.write('    sleep 100000\n')
        f.write('done\n')
    os.chmod(os.path.join(BUILD_DIR, 'start.sh'), 0755)
